
def impact_service(df):
    # Initialize new columns
    df['arn'] = ''
    df['resource_id'] = ''
    df['impact_service'] = ''

    # Extract unique resource_ids
    unique_resource_ids = df[df['resource_id'].str.startswith('i-')]['resource_id'].unique()

    # Populate the new columns
    for idx, row in df.iterrows():
        resource_id = row['resource_id']
        if pd.notna(resource_id):
            if resource_id.startswith('arn:'):
                arn_resource_id = resource_id.split('/')[-1]
                if arn_resource_id in unique_resource_ids:
                    df.at[idx, 'arn'] = resource_id
            elif resource_id.startswith('i-'):
                if resource_id in unique_resource_ids:
                    df.at[idx, 'resource_id'] = resource_id

    # Set 'impact_service' values
    df['impact_service'] = df.apply(
        lambda row: 'impact' if row['arn'] else ('non-impact' if row['resource_id'] else ''),
        axis=1
    )

    # Print the final DataFrame
    print(df)

    # Save the DataFrame to CSV with dynamic filename
    current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    dynamic_filename = f'final_file_{current_datetime}.csv'
    output_path = fr'D:\supports\akhil\orange_data\testing\out\arn\{dynamic_filename}'
    df.to_csv(output_path, index=False)

    print(f"File saved as: {output_path}")
    return df

// GitLabEvent.java
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import lombok.Data;

@Data
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.EXISTING_PROPERTY,
  property = "object_kind",
  visible = true
)
@JsonSubTypes({
    @JsonSubTypes.Type(value = MergeRequestEvent.class, name = "merge_request")
})
public abstract class GitLabEvent {
    private String object_kind;
}
-----------
     
// MergeRequestEvent.java
import lombok.Data;
import java.util.Map;
import java.util.List;

@Data
public class MergeRequestEvent extends GitLabEvent {
    private String event_type;
    private User user;
    private Project project;
    private ObjectAttributes object_attributes;
    private List<String> labels;
    private Map<String, Object> changes;

    // Nested Classes
    @Data
    public static class ObjectAttributes {
        private int id;
        private String target_branch;
        private String source_branch;
        private int source_project_id;
        private int author_id;
        private int assignee_id;
        private String title;
        private String created_at;
        private String updated_at;
        private String state;
        private String merge_status;
        private int target_project_id;
        private int iid;
        private String description;
        private int position;
        private String locked_at;
        private int updated_by_id;
        private boolean merge_when_pipeline_succeeds;
        private Integer merge_user_id;
        private String merge_commit_sha;
        private String deleted_at;
        private String merge_error;
        private Map<String, Object> merge_params;
        private String merge_when_pipeline_succeeds_at;
        private boolean force_remove_source_branch;
    }
}
-----------
     
// User.java
import lombok.Data;

@Data
public class User {
    private int id;
    private String name;
    private String username;
    private String email;
    private String avatar_url;
}
-----------
     
// Project.java
import lombok.Data;

@Data
public class Project {
    private int id;
    private String name;
    private String description;
    private String web_url;
    private String avatar_url;
    private String git_ssh_url;
    private String git_http_url;
    private String namespace;
    private int visibility_level;
    private String path_with_namespace;
    private String default_branch;
    private String homepage;
    private String url;
    private String ssh_url;
    private String http_url;
}
-----------
     
// GitLabWebhookController.java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/gitlab-webhook")
@Slf4j
public class GitLabWebhookController {

    private final ObjectMapper objectMapper;
    private static final String SECRET_TOKEN = "mysecret"; // Ideally, retrieve from environment variables

    public GitLabWebhookController(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    @PostMapping
    public ResponseEntity<String> handleGitLabWebhook(
            @RequestBody String payload,
            @RequestHeader("X-Gitlab-Event") String eventType,
            @RequestHeader("X-Gitlab-Token") String token) {
        
        if (!SECRET_TOKEN.equals(token)) {
            log.warn("Unauthorized webhook attempt.");
            return new ResponseEntity<>("Unauthorized", HttpStatus.UNAUTHORIZED);
        }

        try {
            GitLabEvent event = objectMapper.readValue(payload, GitLabEvent.class);
            handleEvent(event);
            return new ResponseEntity<>("Event processed", HttpStatus.OK);
        } catch (Exception e) {
            log.error("Error processing webhook event", e);
            return new ResponseEntity<>("Error processing event", HttpStatus.BAD_REQUEST);
        }
    }

    private void handleEvent(GitLabEvent event) {
        if (event instanceof MergeRequestEvent) {
            MergeRequestEvent mrEvent = (MergeRequestEvent) event;
            processMergeRequestEvent(mrEvent);
        } else {
            log.info("Unhandled event type: {}", event.getObject_kind());
        }
    }

    private void processMergeRequestEvent(MergeRequestEvent event) {
        MergeRequestEvent.ObjectAttributes attrs = event.getObject_attributes();
        log.info("Merge Request Event Received:");
        log.info("Title: {}", attrs.getTitle());
        log.info("State: {}", attrs.getState());
        log.info("Source Branch: {}", attrs.getSource_branch());
        log.info("Target Branch: {}", attrs.getTarget_branch());
        log.info("Author ID: {}", attrs.getAuthor_id());
        log.info("Assignee ID: {}", attrs.getAssignee_id());
        // Add additional processing logic as needed
    }
}
-----------
     
// JacksonConfig.java
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class JacksonConfig {
    
    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        // Ignore unknown properties to prevent failures
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        return mapper;
    }
}
-----------

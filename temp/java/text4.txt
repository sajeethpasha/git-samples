package com.creditone.enterprise.originintegration.services;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import com.creditone.enterprise.originintegration.dto.deployment.DeploymentEventRequest;
import com.creditone.enterprise.originintegration.dto.mergeRequest.MergeRequestEventRequest;
import com.creditone.enterprise.originintegration.exception.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;

/**
 * Comprehensive test cases for WebhookEventProcess, DeploymentProcess, and MergeRequestProcess.
 */
@ExtendWith(MockitoExtension.class)
public class IntegrationServicesTest {

    // -------------------
    // Test Cases for WebhookEventProcess
    // -------------------

    @Mock
    private ObjectMapper webhookObjectMapper;

    @Mock
    private MergeRequestProcess mergeRequestProcess;

    @Mock
    private DeploymentProcess deploymentProcess;

    @Mock
    private Logger webhookLog;

    @InjectMocks
    private WebhookEventProcess webhookEventProcess;

    @Test
    void testWebhookEventProcess_WithMergeRequest_ShouldInvokeMergeRequestProcess() throws Exception {
        // Arrange
        String payload = "{\"object_kind\":\"MERGE_REQUEST\"}";
        JsonNode mockNode = mock(JsonNode.class);

        when(webhookObjectMapper.readTree(payload)).thenReturn(mockNode);
        when(mockNode.get("object_kind")).thenReturn(mock(JsonNode.class));
        when(mockNode.get("object_kind").asText()).thenReturn("MERGE_REQUEST");

        // Act
        webhookEventProcess.handleEvent(payload);

        // Assert
        verify(mergeRequestProcess, times(1)).handleEvent(payload);
        verify(deploymentProcess, never()).handleEvent(anyString());
    }

    // -------------------
    // Test Cases for DeploymentProcess
    // -------------------

    @Mock
    private ObjectMapper deploymentObjectMapper;

    @Mock
    private Logger deploymentLog;

    @InjectMocks
    private DeploymentProcess deploymentProcessTest;

    @Test
    void testDeploymentProcess_WithDeploymentEvent_ShouldProcessDeploymentEvent() throws Exception {
        // Arrange
        String payload = "{\"object_kind\":\"DEPLOYMENT\"}";
        DeploymentEventRequest deploymentEvent = mock(DeploymentEventRequest.class);

        when(deploymentObjectMapper.readValue(payload, GitLabEventRequest.class)).thenReturn(deploymentEvent);
        when(deploymentEvent.toString()).thenReturn("DeploymentEventRequest");

        // Act
        deploymentProcessTest.handleEvent(payload);

        // Assert
        verify(deploymentEvent, never()).getObject_kind();
    }

    // -------------------
    // Test Cases for MergeRequestProcess
    // -------------------

    @Mock
    private ObjectMapper mergeRequestObjectMapper;

    @Mock
    private Logger mergeRequestLog;

    @InjectMocks
    private MergeRequestProcess mergeRequestProcessTest;

    @Test
    void testMergeRequestProcess_WithMergeRequestEvent_ShouldProcessMergeRequestEvent() throws Exception {
        // Arrange
        String payload = "{\"object_kind\":\"MERGE_REQUEST\"}";
        MergeRequestEventRequest mergeRequestEvent = mock(MergeRequestEventRequest.class);

        when(mergeRequestObjectMapper.readValue(payload, GitLabEventRequest.class)).thenReturn(mergeRequestEvent);

        // Act
        mergeRequestProcessTest.handleEvent(payload);

        // Assert
        verify(mergeRequestEvent, never()).getObject_kind();
    }

    // -------------------
    // Additional Test Cases
    // -------------------

    @Test
    void testWebhookEventProcess_WithInvalidJson_ShouldLogError() throws Exception {
        // Arrange
        String payload = "Invalid JSON";

        when(webhookObjectMapper.readTree(payload)).thenThrow(new RuntimeException("JSON parsing error"));

        // Act
        webhookEventProcess.handleEvent(payload);

        // Assert
        verify(webhookLog, times(1)).error(eq("Error processing webhook event: {}"), any(Exception.class));
    }

    @Test
    void testDeploymentProcess_WithNonDeploymentEvent_ShouldLogUnhandledEvent() throws Exception {
        // Arrange
        String payload = "{\"object_kind\":\"MERGE_REQUEST\"}";
        GitLabEventRequest nonDeploymentEvent = mock(GitLabEventRequest.class);

        when(deploymentObjectMapper.readValue(payload, GitLabEventRequest.class)).thenReturn(nonDeploymentEvent);
        when(nonDeploymentEvent.getObject_kind()).thenReturn("MERGE_REQUEST");

        // Act
        deploymentProcessTest.handleEvent(payload);

        // Assert
        verify(deploymentLog, times(1)).info("Unhandled event type : {}", "MERGE_REQUEST");
    }

    @Test
    void testMergeRequestProcess_WithInvalidJson_ShouldThrowJsonProcessingException() throws Exception {
        // Arrange
        String payload = "Invalid JSON";

        when(mergeRequestObjectMapper.readValue(payload, GitLabEventRequest.class))
                .thenThrow(new JsonProcessingException("JSON parsing error") {});

        // Act & Assert
        try {
            mergeRequestProcessTest.handleEvent(payload);
        } catch (JsonProcessingException e) {
            // Expected exception
            assert(e.getMessage().contains("JSON parsing error"));
        }
    }
}

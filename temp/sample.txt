@GetMapping("/conversion/{item-id}/LT/{uom-code}")
public ResponseEntity<Mono<Double>> getConversionToLiter(
        @PathVariable("item-id") Long itemId,
        @PathVariable("uom-code") String uomCode) {

    if (!isValidUomCode(uomCode)) {
        return ResponseEntity.badRequest().body(Mono.error(new IllegalArgumentException("Invalid UOM Code")));
    }

    return ResponseEntity.ok(
        itemService.getConversionToLiter(itemId, sanitize(uomCode))
    );
}

// Example validation method
private boolean isValidUomCode(String uomCode) {
    return uomCode != null && uomCode.matches("[A-Za-z0-9_\\-]+");
}

// Example sanitization method
private String sanitize(String input) {
    return input.replaceAll("[^A-Za-z0-9_\\-]", "");
}

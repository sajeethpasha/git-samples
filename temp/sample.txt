import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import org.aspectj.lang.reflect.MethodSignature;

@Around("execution(* com.sherwin.edps.batchmgmtbff.services..*(..)) || " +
        "execution(* com.sherwin.edps.batchmgmtbff.controllers..*(..)) || " +
        "execution(* com.sherwin.edps.batchmgmtbff.clients..*(..))")
public Object sanitizeParameters(ProceedingJoinPoint joinPoint) throws Throwable {
    Object[] args = joinPoint.getArgs();
    MethodSignature signature = (MethodSignature) joinPoint.getSignature();
    Method method = signature.getMethod();
    Parameter[] parameters = method.getParameters();

    for (int i = 0; i < parameters.length; i++) {
        if ("reservationIds".equals(parameters[i].getName())) {
            // Apply specific logic for reservationIds
            args[i] = sanitizeReservationIds((String) args[i]);
        } else {
            // General sanitization for other String arguments
            args[i] = processArgument(args[i]);
        }
    }

    return joinPoint.proceed(args);
}

private String sanitizeReservationIds(String reservationIds) {
    if (reservationIds == null) {
        return null;
    }
    // Allow only digits and commas
    return reservationIds.replaceAll("[^0-9,]", "");
}

private Object processArgument(Object arg) {
    if (arg instanceof String) {
        return sanitizeString(arg);
    } else if (arg instanceof Integer) {
        validateInteger((Integer) arg);
    } else if (arg instanceof Long) {
        validateLong((Long) arg);
    }
    return arg;
}

private String sanitizeString(Object input) {
    if (input == null) {
        return null;
    }
    return input.toString().replaceAll("[^A-Za-z0-9_\\-]", ""); // General sanitization
}
